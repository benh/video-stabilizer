# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import video_stabilizer_pb2 as video__stabilizer__pb2


class VideoStabilizerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Stabilize = channel.unary_unary(
                '/unary.VideoStabilizer/Stabilize',
                request_serializer=video__stabilizer__pb2.StabilizeRequest.SerializeToString,
                response_deserializer=video__stabilizer__pb2.StabilizeResponse.FromString,
                )


class VideoStabilizerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Stabilize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoStabilizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Stabilize': grpc.unary_unary_rpc_method_handler(
                    servicer.Stabilize,
                    request_deserializer=video__stabilizer__pb2.StabilizeRequest.FromString,
                    response_serializer=video__stabilizer__pb2.StabilizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'unary.VideoStabilizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoStabilizer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Stabilize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.VideoStabilizer/Stabilize',
            video__stabilizer__pb2.StabilizeRequest.SerializeToString,
            video__stabilizer__pb2.StabilizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlowStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Flow = channel.unary_unary(
                '/unary.Flow/Flow',
                request_serializer=video__stabilizer__pb2.FlowRequest.SerializeToString,
                response_deserializer=video__stabilizer__pb2.FlowResponse.FromString,
                )


class FlowServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Flow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlowServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Flow': grpc.unary_unary_rpc_method_handler(
                    servicer.Flow,
                    request_deserializer=video__stabilizer__pb2.FlowRequest.FromString,
                    response_serializer=video__stabilizer__pb2.FlowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'unary.Flow', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Flow(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Flow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.Flow/Flow',
            video__stabilizer__pb2.FlowRequest.SerializeToString,
            video__stabilizer__pb2.FlowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CumSumStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CumSum = channel.unary_unary(
                '/unary.CumSum/CumSum',
                request_serializer=video__stabilizer__pb2.CumSumRequest.SerializeToString,
                response_deserializer=video__stabilizer__pb2.CumSumResponse.FromString,
                )


class CumSumServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CumSum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CumSumServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CumSum': grpc.unary_unary_rpc_method_handler(
                    servicer.CumSum,
                    request_deserializer=video__stabilizer__pb2.CumSumRequest.FromString,
                    response_serializer=video__stabilizer__pb2.CumSumResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'unary.CumSum', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CumSum(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CumSum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.CumSum/CumSum',
            video__stabilizer__pb2.CumSumRequest.SerializeToString,
            video__stabilizer__pb2.CumSumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
